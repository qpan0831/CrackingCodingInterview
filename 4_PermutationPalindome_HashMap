import javax.naming.CompositeName;
import java.util.HashMap;
import java.util.Map;
import java.util.Arrays;
/**
 * Created by Qiang Pan on 6/9/2017.
 */

//Time O(n) n is length of the string
// Space complexity O(n)
public class Solution {
    boolean PermutationPalindrome(String str)
    {
        char[] res = new char[str.length()];
        HashMap<Character,Integer> map = new HashMap<>();
        //put all chacters to the map first with value of apperance
        for(int i=0;i<str.length();i++)
        {
            if(map.containsKey(str.charAt(i)))
            {
                int counter = map.get(str.charAt(i));
                counter++;
                map.replace(str.charAt(i),counter);
            }
            else
            {
                map.put(str.charAt(i),1);
            }
        }
        int resultCounter=0;
        for(int i=0;i<str.length();i++)
        {
            if((map.get(str.charAt(i))%2==1)&&str.charAt(i)!= ' ')
            {
                resultCounter++;
                if(resultCounter%2==0)
                    return false;
            }
        }
        return true;
    }


    public static void main(String[] args)
    {
       Solution s = new Solution();
       String test1="defining features";
       System.out.println(s.PermutationPalindrome(test1));
    }
}
