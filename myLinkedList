import org.omg.PortableInterceptor.INACTIVE;

import java.util.*;

/**
 * Created by Qiang Pan on 6/15/2017.
 */
public class MyLinkedList {
    private Node head;
    private int size;


    public boolean isEmpty()
    {
        return head==null;
    }
    public int getSize()
    {
        return size;
    }

    public MyLinkedList()
    {
        head=null;
        size=0;
    }



    //remove all dupplicate in linkedlist
    public void removeDuplicate(MyLinkedList list)
    {
        Node current = list.head;
        Node previous = list.head;
        Set<Integer> set = new HashSet<Integer>();
        while(current!=null)
        {
            if(!set.contains(current.data))
            {
                set.add(current.data);
                previous=current;
            }
            else
            {
                previous.next=current.next;
            }
            current=current.next;
        }
    }

    public void removeMiddleNote(MyLinkedList list)
    {
        if(list.head==null|list.head.next==null)
            return;

        Node current = list.head;
        int length=0;
        while(current!=null)
        {
            length++;
            current=current.next;
        }
        int middle=length/2-1;
        Node first = list.head;
        for(int i=0;i<middle-1;i++)
        {
            first=first.next;
        }
        first.next=first.next.next;
    }

    //public boolean isEmpty
    public void appendToEnd(int data)
    {
        Node n = new Node(data);
        Node current=head;
        if(current==null)
        {
            head=n;
            size++;
            return;
        }
        while(current.next!=null)
        {
            current=current.next;
        }
        current.next=n;
        size++;

    }

    public void add(int data)
    {
        Node n = new Node(data);

        if(head==null)
        {
            head=n;
            size++;
            return;
        }
        n.next=head;
        head=n;
        size++;
    }

    public boolean delete(int data)
    {
        Node current = head;
        if(current==null)
            return false;
        if(current.data==data)
        {
            head=head.next;
            size--;
            return true;
        }
        while(current.next!=null)
        {
            if(current.next.data==data)
            {
                current.next=current.next.next;
                size--;
                return true;
            }
            current=current.next;
        }
        return false;
    }


    public void print()
    {
        Node current = head;
        while(current!=null)
        {
            System.out.print(current.data+" ");
            current=current.next;
        }
    }

    //return Kth element to the end of the list;
    public Node returnKth(Node head,int kth)
    {
        Node p1=head;
        Node p2=head;
        for(int i=0;i<kth;i++)
        {
            if(p2==null)
                return null;
            p2=p2.next;
        }
        while(p2.next!=null)
        {
            p1=p1.next;
            p2=p2.next;
        }
        return p1;
    }

    public Node reverseList(Node n)
    {
        Node head= null;
        while(n!=null) {
            Node temp = new Node(n.data);
            temp.next = head;
            head = temp;
            n= n.next;
        }
        return head;
    }

    public boolean isPalindrome(MyLinkedList list)
    {
        Node a1=list.head;
        Node a2=reverseList(list.head);
        while(a1!=null&&a2!=null)
        {
            if(a1.data!=a2.data)
                return false;
            else
            {
                a1=a1.next;
                a2=a2.next;
            }
        }
        return a1==null&&a2==null;
    }


    public static void main(String[] args)
    {
        MyLinkedList myList1 = new MyLinkedList();
        MyLinkedList myList2 = new MyLinkedList();

        myList1.appendToEnd(7);
        myList1.appendToEnd(1);
        myList1.appendToEnd(6);
        myList1.appendToEnd(7);

        myList1.print();
        System.out.println();


        myList2.appendToEnd(5);
        myList2.appendToEnd(9);
        myList2.appendToEnd(2);
        myList2.print();
        System.out.println();

        MyLinkedList test = new MyLinkedList();
        test.add(0);
        test.add(1);
        test.add(0);
        System.out.print(test.isPalindrome(test));

    }

    public int getLength(MyLinkedList list)
    {
        int len=0;
        Node current = list.head;
        while(current!=null)
        {
            len++;
            current=current.next;
        }
        return len;
    }
    public MyLinkedList paddingZeroInFront(MyLinkedList list,int zeros)
    {

        Node current = list.head;
        while(zeros!=0)
        {
            Node temp = new Node(0);
            temp.next=current;
            current=temp;
            zeros--;
        }
        list.head=current;
        return list;

    }

    public Node sumListFollowUP(MyLinkedList l1, MyLinkedList l2)
    {
        int len1=getLength(l1);
        int len2=getLength(l2);
        int diff;
        if(len1>len2)
        {
         diff=len1-len2;
         paddingZeroInFront(l2,diff);
        }
        if(len1<len2)
        {
            diff=len2-len1;
            paddingZeroInFront(l1,diff);

        }
        Node res=sumList(l1,l2);
        return res;
    }



    public Node sumList(MyLinkedList l1, MyLinkedList l2)
    {
        int carry=0;
        Node l1Head=l1.head;
        Node l2Head=l2.head;
        Node res= new Node(-1);
        Node current = res;
        while(l1Head!=null && l2Head!=null)
        {
           int sum=l1Head.data+l2Head.data+carry;
            carry=sum/10;
            sum=sum%10;
            current=new Node(sum);
            current.next=res;
            res=current;
            l1Head=l1Head.next;
            l2Head=l2Head.next;
        }

        return res;
    }

}
